# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import db_node_pb2 as db__node__pb2

GRPC_GENERATED_VERSION = '1.70.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in db_node_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class DatabaseStub(object):
    """Database service for a distributed key-value store with leader election
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Read = channel.unary_unary(
                '/db_node.Database/Read',
                request_serializer=db__node__pb2.ReadRequest.SerializeToString,
                response_deserializer=db__node__pb2.ReadResponse.FromString,
                _registered_method=True)
        self.ReadAll = channel.unary_unary(
                '/db_node.Database/ReadAll',
                request_serializer=db__node__pb2.ReadAllRequest.SerializeToString,
                response_deserializer=db__node__pb2.ReadAllResponse.FromString,
                _registered_method=True)
        self.Write = channel.unary_unary(
                '/db_node.Database/Write',
                request_serializer=db__node__pb2.WriteRequest.SerializeToString,
                response_deserializer=db__node__pb2.WriteResponse.FromString,
                _registered_method=True)
        self.DecrementStock = channel.unary_unary(
                '/db_node.Database/DecrementStock',
                request_serializer=db__node__pb2.DecrementRequest.SerializeToString,
                response_deserializer=db__node__pb2.DecrementResponse.FromString,
                _registered_method=True)
        self.IncrementStock = channel.unary_unary(
                '/db_node.Database/IncrementStock',
                request_serializer=db__node__pb2.IncrementRequest.SerializeToString,
                response_deserializer=db__node__pb2.IncrementResponse.FromString,
                _registered_method=True)
        self.Heartbeat = channel.unary_unary(
                '/db_node.Database/Heartbeat',
                request_serializer=db__node__pb2.HeartbeatRequest.SerializeToString,
                response_deserializer=db__node__pb2.HeartbeatResponse.FromString,
                _registered_method=True)
        self.GetStatus = channel.unary_unary(
                '/db_node.Database/GetStatus',
                request_serializer=db__node__pb2.StatusRequest.SerializeToString,
                response_deserializer=db__node__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.RequestVote = channel.unary_unary(
                '/db_node.Database/RequestVote',
                request_serializer=db__node__pb2.VoteRequest.SerializeToString,
                response_deserializer=db__node__pb2.VoteResponse.FromString,
                _registered_method=True)


class DatabaseServicer(object):
    """Database service for a distributed key-value store with leader election
    """

    def Read(self, request, context):
        """Read a value for a key from any node
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadAll(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Write(self, request, context):
        """Write a value for a key - only primary node accepts
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DecrementStock(self, request, context):
        """Atomic decrement operation for stock management
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IncrementStock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Heartbeat(self, request, context):
        """primary node sends heartbeat to replicas
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStatus(self, request, context):
        """get status from ndoe
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RequestVote(self, request, context):
        """each node can request vote for election
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DatabaseServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Read': grpc.unary_unary_rpc_method_handler(
                    servicer.Read,
                    request_deserializer=db__node__pb2.ReadRequest.FromString,
                    response_serializer=db__node__pb2.ReadResponse.SerializeToString,
            ),
            'ReadAll': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadAll,
                    request_deserializer=db__node__pb2.ReadAllRequest.FromString,
                    response_serializer=db__node__pb2.ReadAllResponse.SerializeToString,
            ),
            'Write': grpc.unary_unary_rpc_method_handler(
                    servicer.Write,
                    request_deserializer=db__node__pb2.WriteRequest.FromString,
                    response_serializer=db__node__pb2.WriteResponse.SerializeToString,
            ),
            'DecrementStock': grpc.unary_unary_rpc_method_handler(
                    servicer.DecrementStock,
                    request_deserializer=db__node__pb2.DecrementRequest.FromString,
                    response_serializer=db__node__pb2.DecrementResponse.SerializeToString,
            ),
            'IncrementStock': grpc.unary_unary_rpc_method_handler(
                    servicer.IncrementStock,
                    request_deserializer=db__node__pb2.IncrementRequest.FromString,
                    response_serializer=db__node__pb2.IncrementResponse.SerializeToString,
            ),
            'Heartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.Heartbeat,
                    request_deserializer=db__node__pb2.HeartbeatRequest.FromString,
                    response_serializer=db__node__pb2.HeartbeatResponse.SerializeToString,
            ),
            'GetStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStatus,
                    request_deserializer=db__node__pb2.StatusRequest.FromString,
                    response_serializer=db__node__pb2.StatusResponse.SerializeToString,
            ),
            'RequestVote': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestVote,
                    request_deserializer=db__node__pb2.VoteRequest.FromString,
                    response_serializer=db__node__pb2.VoteResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'db_node.Database', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('db_node.Database', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Database(object):
    """Database service for a distributed key-value store with leader election
    """

    @staticmethod
    def Read(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/db_node.Database/Read',
            db__node__pb2.ReadRequest.SerializeToString,
            db__node__pb2.ReadResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReadAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/db_node.Database/ReadAll',
            db__node__pb2.ReadAllRequest.SerializeToString,
            db__node__pb2.ReadAllResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Write(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/db_node.Database/Write',
            db__node__pb2.WriteRequest.SerializeToString,
            db__node__pb2.WriteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DecrementStock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/db_node.Database/DecrementStock',
            db__node__pb2.DecrementRequest.SerializeToString,
            db__node__pb2.DecrementResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def IncrementStock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/db_node.Database/IncrementStock',
            db__node__pb2.IncrementRequest.SerializeToString,
            db__node__pb2.IncrementResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Heartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/db_node.Database/Heartbeat',
            db__node__pb2.HeartbeatRequest.SerializeToString,
            db__node__pb2.HeartbeatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/db_node.Database/GetStatus',
            db__node__pb2.StatusRequest.SerializeToString,
            db__node__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RequestVote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/db_node.Database/RequestVote',
            db__node__pb2.VoteRequest.SerializeToString,
            db__node__pb2.VoteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
