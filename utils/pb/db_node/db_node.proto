syntax = "proto3";

package db_node;

// Database service for a distributed key-value store with leader election
service Database {
  // Read a value for a key from any node
  rpc Read (ReadRequest) returns (ReadResponse) {}

  rpc ReadAll (ReadAllRequest) returns (ReadAllResponse) {}
  
  // Write a value for a key - only primary node accepts
  rpc Write (WriteRequest) returns (WriteResponse) {}
  
  // Atomic decrement operation for stock management
  rpc DecrementStock (DecrementRequest) returns (DecrementResponse) {}

  rpc IncrementStock (IncrementRequest) returns (IncrementResponse) {}
  
  //primary node sends heartbeat to replicas
  rpc Heartbeat (HeartbeatRequest) returns (HeartbeatResponse) {}
  
  //get status from ndoe
  rpc GetStatus (StatusRequest) returns (StatusResponse) {}
  
  //each node can request vote for election
  rpc RequestVote (VoteRequest) returns (VoteResponse) {}
}

message KeyValuePair {
  string key = 1;
  string value = 2;
  int32 version = 3;
  WriteRequest.ValueType type = 4;  // Type of the value
}

// Request to read a key
message ReadRequest {
  string key = 1;
}

message ReadAllRequest {
}

message ReadAllResponse {
  bool success = 1;
  string message = 2;
  repeated KeyValuePair items = 3;
  int32 total_returned = 4;
}

// Response with the value for a key
message ReadResponse {
  bool success = 1;
  string value = 2;
  int32 version = 3;
  string message = 4;
}

// Request to write a value for a key
message WriteRequest {
  string key = 1;
  string value = 2;
  
  // serialization/deserialization handling
  enum ValueType {
    STRING = 0;
    INT = 1;
    FLOAT = 2;
    JSON = 3;
  }
  ValueType type = 3;
}

// Response for a write operation
message WriteResponse {
  bool success = 1;
  string message = 2;
  int32 version = 3;
  string primary_id = 4;  // For redirects
}

// Request for atomic decrement operation
message DecrementRequest {
  string key = 1;
  float amount = 2;
}

// increment stock
message IncrementRequest {
  string key = 1;
  float amount = 2;
}

// Response for decrement operation
message DecrementResponse {
  bool success = 1;
  float new_value = 2;
  string message = 3;
  float current_value = 4;
  int32 version = 5;
  string primary_id = 6;  // For redirects
}

// Response for decrement operation
message IncrementResponse {
  bool success = 1;
  float new_value = 2;
  string message = 3;
  float current_value = 4;
  int32 version = 5;
  string primary_id = 6;  // For redirects
}

// Heartbeat message from primary to replica with updates
message HeartbeatRequest {
  string primary_id = 1;
  int32 term = 2;  // Current term of the primary
  repeated string updates = 3;  // JSON serialized operations
  int32 last_index = 4;
}

// Response to a heartbeat
message HeartbeatResponse {
  bool success = 1;
  string message = 2;
  int32 term = 3;  // Current term of the responding node
}

// Request for vote during election
message VoteRequest {
  int32 term = 1;  // Candidate's term
  string candidate_id = 2;  // Candidate requesting vote
  int32 last_log_index = 3;  // Index of candidate's last log entry
}

// Response to vote request
message VoteResponse {
  bool vote_granted = 1;  // True if candidate received vote
  int32 term = 2;  // Current term of the responding node
}

// Request for node status
message StatusRequest {}

// Response with node status information
message StatusResponse {
  string node_id = 1;
  string role = 2;
  string primary_id = 3;
  int32 record_count = 4;
  int32 term = 5;  // term of the voting node
}
