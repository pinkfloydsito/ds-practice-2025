# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import raft_pb2 as raft__pb2

GRPC_GENERATED_VERSION = '1.70.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in raft_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ClientServiceStub(object):
    """job submitting and leader discovery
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SubmitJob = channel.unary_unary(
                '/order_executor.ClientService/SubmitJob',
                request_serializer=raft__pb2.JobRequest.SerializeToString,
                response_deserializer=raft__pb2.JobResponse.FromString,
                _registered_method=True)
        self.GetLeader = channel.unary_unary(
                '/order_executor.ClientService/GetLeader',
                request_serializer=raft__pb2.Empty.SerializeToString,
                response_deserializer=raft__pb2.LeaderResponse.FromString,
                _registered_method=True)


class ClientServiceServicer(object):
    """job submitting and leader discovery
    """

    def SubmitJob(self, request, context):
        """submit a job to the registered node (desired is the leader)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLeader(self, request, context):
        """get current leader id
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ClientServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SubmitJob': grpc.unary_unary_rpc_method_handler(
                    servicer.SubmitJob,
                    request_deserializer=raft__pb2.JobRequest.FromString,
                    response_serializer=raft__pb2.JobResponse.SerializeToString,
            ),
            'GetLeader': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLeader,
                    request_deserializer=raft__pb2.Empty.FromString,
                    response_serializer=raft__pb2.LeaderResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'order_executor.ClientService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('order_executor.ClientService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ClientService(object):
    """job submitting and leader discovery
    """

    @staticmethod
    def SubmitJob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/order_executor.ClientService/SubmitJob',
            raft__pb2.JobRequest.SerializeToString,
            raft__pb2.JobResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetLeader(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/order_executor.ClientService/GetLeader',
            raft__pb2.Empty.SerializeToString,
            raft__pb2.LeaderResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class RaftStub(object):
    """Internal Raft consensus service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RequestVote = channel.unary_unary(
                '/order_executor.Raft/RequestVote',
                request_serializer=raft__pb2.RequestVoteArgs.SerializeToString,
                response_deserializer=raft__pb2.RequestVoteResult.FromString,
                _registered_method=True)
        self.AppendEntries = channel.unary_unary(
                '/order_executor.Raft/AppendEntries',
                request_serializer=raft__pb2.AppendEntriesArgs.SerializeToString,
                response_deserializer=raft__pb2.AppendEntriesResult.FromString,
                _registered_method=True)
        self.SubmitJob = channel.unary_unary(
                '/order_executor.Raft/SubmitJob',
                request_serializer=raft__pb2.JobRequest.SerializeToString,
                response_deserializer=raft__pb2.JobResponse.FromString,
                _registered_method=True)
        self.GetLeader = channel.unary_unary(
                '/order_executor.Raft/GetLeader',
                request_serializer=raft__pb2.Empty.SerializeToString,
                response_deserializer=raft__pb2.LeaderResponse.FromString,
                _registered_method=True)


class RaftServicer(object):
    """Internal Raft consensus service
    """

    def RequestVote(self, request, context):
        """Request vote from a peer node during election
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AppendEntries(self, request, context):
        """Send heartbeats and replicate log entries
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubmitJob(self, request, context):
        """Also expose client-facing endpoints for simplicity
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLeader(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RaftServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RequestVote': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestVote,
                    request_deserializer=raft__pb2.RequestVoteArgs.FromString,
                    response_serializer=raft__pb2.RequestVoteResult.SerializeToString,
            ),
            'AppendEntries': grpc.unary_unary_rpc_method_handler(
                    servicer.AppendEntries,
                    request_deserializer=raft__pb2.AppendEntriesArgs.FromString,
                    response_serializer=raft__pb2.AppendEntriesResult.SerializeToString,
            ),
            'SubmitJob': grpc.unary_unary_rpc_method_handler(
                    servicer.SubmitJob,
                    request_deserializer=raft__pb2.JobRequest.FromString,
                    response_serializer=raft__pb2.JobResponse.SerializeToString,
            ),
            'GetLeader': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLeader,
                    request_deserializer=raft__pb2.Empty.FromString,
                    response_serializer=raft__pb2.LeaderResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'order_executor.Raft', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('order_executor.Raft', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Raft(object):
    """Internal Raft consensus service
    """

    @staticmethod
    def RequestVote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/order_executor.Raft/RequestVote',
            raft__pb2.RequestVoteArgs.SerializeToString,
            raft__pb2.RequestVoteResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AppendEntries(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/order_executor.Raft/AppendEntries',
            raft__pb2.AppendEntriesArgs.SerializeToString,
            raft__pb2.AppendEntriesResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubmitJob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/order_executor.Raft/SubmitJob',
            raft__pb2.JobRequest.SerializeToString,
            raft__pb2.JobResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetLeader(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/order_executor.Raft/GetLeader',
            raft__pb2.Empty.SerializeToString,
            raft__pb2.LeaderResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
