version: '3.8'

x-raft-node-template: &raft-node-template
  build:
      context: ./
      dockerfile: ./order_executor/Dockerfile
  restart: unless-stopped
  networks:
    - boostore-network
  healthcheck:
    test: ["CMD", "python", "-c", "import socket; s=socket.socket(); s.connect(('localhost', 50051)); s.close()"]
    interval: 5s
    timeout: 3s
    retries: 3
  environment:
    - AUTO_DISCOVER=true
    - WAIT_FOR_NODES=false
    - NODE_COUNT=5
    - LOG_LEVEL=INFO

services:
  frontend:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      dockerfile: ./frontend/Dockerfile
    ports:
      # Expose port 8080 on the host, and map port 80 of the container to port 8080 on the host
      # Access the application at http://localhost:8080
      - "8080:80"
    volumes:
      # Mount the frontend directory
      - ./frontend/src:/usr/share/nginx/html
    networks:
      - boostore-network
  orchestrator:
    env_file:
      - .env
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      # Use the Dockerfile in the orchestrator directory
      dockerfile: ./orchestrator/Dockerfile

    networks:
      - boostore-network
    ports:
      # Expose port 8081 on the host, and map port 5000 of the container to port 8081 on the host
      - 8081:5000
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the orchestrator directory to see how this is used
      - PYTHONFILE=/app/orchestrator/src/app.py
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the orchestrator/src directory in the current directory to the /app/orchestrator/src directory in the container
      - ./orchestrator/src:/app/orchestrator/src
      - ./orchestrator/logs:/app/orchestrator/logs
  fraud_detection:
    env_file:
      - .env
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      # Use the Dockerfile in the fraud_detection directorys
      dockerfile: ./fraud_detection/Dockerfile
    networks:
      - boostore-network
    ports:
      # Expose port 50051 on the host, and map port 50051 of the container to port 50051 on the host
      - 50051:50051
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the fraud_detection directory to see how this is used
      - PYTHONFILE=/app/fraud_detection/src/app.py
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the fraud_detection/src directory in the current directory to the /app/fraud_detection/src directory in the container
      - ./fraud_detection/src:/app/fraud_detection/src
  suggestions:
    build:
      context: ./
      dockerfile: ./suggestions/Dockerfile
    env_file:
      - .env
    ports:
      - 50053:50053
    networks:
      - boostore-network
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      - PYTHONFILE=/app/suggestions/src/app.py
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      - ./suggestions/src:/app/suggestions/src
      - ./ai/models:/app/ai/models/

  postgres:
    build:
      context: .
      dockerfile: ./db/Dockerfile
    image: bookstore_postgres
    container_name: bookstore_postgres
    networks:
      - boostore-network
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
      - ./db/init-extensions.sql:/docker-entrypoint-initdb.d/init-extensions.sql
      - ./db/dummy_data/bookstore.sql:/docker-entrypoint-initdb.d/bookstore.sql 
    env_file:
      - .env
    ports:
      - "5432:5432"

  transaction_verification:
    env_file:
      - .env
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      # Use the Dockerfile in the fraud_detection directorys
      dockerfile: ./transaction_verification/Dockerfile
    networks:
      - boostore-network
    ports:
      # Expose port 50052 on the host, and map port 50052 of the container to port 50051 on the host
      - 50052:50052
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the fraud_detection directory to see how this is used
      - PYTHONFILE=/app/transaction_verification/src/app.py
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the transection_verification/src directory in the current directory to the /app/transection_verification/src directory in the container
      - ./transaction_verification/src:/app/transaction_verification/src
  
  raft-node-1:
    <<: *raft-node-template
    container_name: raft-node1
    hostname: raft-node1
    environment:
      - PEERS=raft-node1:50051,raft-node2:50051,raft-node3:50051,raft-node4:50051,raft-node5:50051
      - NODE_ID=node1
      - AUTO_DISCOVER=false
      - WAIT_FOR_NODES=true
      - NODE_COUNT=5
    ports:
      - "50061:50051"
    volumes:
      - ./utils:/app/utils
      - ./order_executor/src:/app/order_executor/src

  raft-node-2:
    <<: *raft-node-template
    container_name: raft-node2
    hostname: raft-node2
    environment:
      - PEERS=raft-node1:50051,raft-node2:50051,raft-node3:50051,raft-node4:50051,raft-node5:50051
      - NODE_ID=node2
      - AUTO_DISCOVER=true
      - WAIT_FOR_NODES=false
      - NODE_COUNT=5
    ports:
      - "50062:50051"
    volumes:
      - ./utils:/app/utils
      - ./order_executor/src:/app/order_executor/src
    depends_on:
      - raft-node-1

  raft-node-3:
    <<: *raft-node-template
    container_name: raft-node3
    hostname: raft-node3  
    environment:
      - PEERS=raft-node1:50051,raft-node2:50051,raft-node3:50051,raft-node4:50051,raft-node5:50051
      - NODE_ID=node3
      - AUTO_DISCOVER=true
      - WAIT_FOR_NODES=false
      - NODE_COUNT=5
    ports:
      - "50063:50051"
    volumes:
      - ./utils:/app/utils
      - ./order_executor/src:/app/order_executor/src
    depends_on:
      - raft-node-1

  raft-node-4:
    <<: *raft-node-template
    container_name: raft-node4
    hostname: raft-node4
    environment:
      - PEERS=raft-node1:50051,raft-node2:50051,raft-node3:50051,raft-node4:50051,raft-node5:50051
      - NODE_ID=node4
      - AUTO_DISCOVER=true
      - WAIT_FOR_NODES=false
      - NODE_COUNT=5
    ports:
      - "50064:50051"
    volumes:
      - ./utils:/app/utils
      - ./order_executor/src:/app/order_executor/src
    depends_on:
      - raft-node-1

  raft-node-5:
    <<: *raft-node-template
    container_name: raft-node5
    hostname: raft-node5
    environment:
      - PEERS=raft-node1:50051,raft-node2:50051,raft-node3:50051,raft-node4:50051,raft-node5:50051
      - NODE_ID=node5
      - AUTO_DISCOVER=true
      - WAIT_FOR_NODES=false
      - NODE_COUNT=5
    ports:
      - "50065:50051"
    volumes:
      - ./utils:/app/utils
      - ./order_executor/src:/app/order_executor/src
    depends_on:
      - raft-node-1

  db-node1:
    build:
      context: .
      dockerfile: Dockerfile.database
    environment:
      - DB_NODE_ID=db-node1
      - DB_PORT=50052
      - DB_ROLE=REPLICA  # Start as replica, leader will be elected
      - DB_PEERS=db-node2:50052,db-node3:50052
      - DB_NODE_COUNT=3
    ports:
      - "50066:50052"
    networks:
      - bookstore-network
    healthcheck:
      test: ["CMD", "python", "-c", "import socket; s = socket.socket(); s.connect(('localhost', 50052))"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # Second database node
  db-node2:
    build:
      context: .
      dockerfile: Dockerfile.database
    environment:
      - DB_NODE_ID=db-node2
      - DB_PORT=50052
      - DB_ROLE=REPLICA  # Start as replica, leader will be elected
      - DB_PEERS=db-node1:50052,db-node3:50052
      - DB_NODE_COUNT=3
    ports:
      - "50067:50052"
    networks:
      - bookstore-network
    depends_on:
      - db-node1

  # Third database node
  db-node3:
    build:
      context: .
      dockerfile: Dockerfile.database
    environment:
      - DB_NODE_ID=db-node3
      - DB_PORT=50052
      - DB_ROLE=REPLICA  # Start as replica, leader will be elected
      - DB_PEERS=db-node1:50052,db-node2:50052
      - DB_NODE_COUNT=3
    ports:
      - "50068:50052"
    networks:
      - bookstore-network
    depends_on:
      - db-node1

networks:
  boostore-network:
    driver: bridge
